// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AnnouncementMessage struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnnouncementMessage) Reset()         { *m = AnnouncementMessage{} }
func (m *AnnouncementMessage) String() string { return proto.CompactTextString(m) }
func (*AnnouncementMessage) ProtoMessage()    {}
func (*AnnouncementMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *AnnouncementMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnnouncementMessage.Unmarshal(m, b)
}
func (m *AnnouncementMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnnouncementMessage.Marshal(b, m, deterministic)
}
func (m *AnnouncementMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnnouncementMessage.Merge(m, src)
}
func (m *AnnouncementMessage) XXX_Size() int {
	return xxx_messageInfo_AnnouncementMessage.Size(m)
}
func (m *AnnouncementMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AnnouncementMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AnnouncementMessage proto.InternalMessageInfo

func (m *AnnouncementMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Request struct {
	ClientId             int32    `protobuf:"varint,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func init() {
	proto.RegisterType((*AnnouncementMessage)(nil), "api.AnnouncementMessage")
	proto.RegisterType((*Request)(nil), "api.Request")
}

func init() {
	proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c)
}

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0xd2, 0xe7, 0x12, 0x76, 0xcc,
	0xcb, 0xcb, 0x2f, 0xcd, 0x4b, 0x4e, 0xcd, 0x4d, 0xcd, 0x2b, 0xf1, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c,
	0x4f, 0x15, 0x92, 0xe0, 0x62, 0xcf, 0x85, 0x30, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60,
	0x5c, 0x25, 0x55, 0x2e, 0xf6, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x29, 0x2e, 0x8e,
	0xe4, 0x9c, 0xcc, 0xd4, 0xbc, 0x12, 0xcf, 0x14, 0xb0, 0x2a, 0xd6, 0x20, 0x38, 0xdf, 0xc8, 0x85,
	0x8b, 0x07, 0xd9, 0x5c, 0x21, 0x13, 0x2e, 0x36, 0x9f, 0xcc, 0xe2, 0x92, 0xd4, 0x3c, 0x21, 0x1e,
	0x3d, 0x90, 0x13, 0xa0, 0x66, 0x48, 0x49, 0x80, 0x79, 0x58, 0x9c, 0xa0, 0xc4, 0x60, 0xc0, 0x98,
	0xc4, 0x06, 0x76, 0xa9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x78, 0x9e, 0x8f, 0xb6, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AnnouncementClient is the client API for Announcement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnnouncementClient interface {
	// Start listening for announcements.
	Listen(ctx context.Context, in *Request, opts ...grpc.CallOption) (Announcement_ListenClient, error)
}

type announcementClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncementClient(cc grpc.ClientConnInterface) AnnouncementClient {
	return &announcementClient{cc}
}

func (c *announcementClient) Listen(ctx context.Context, in *Request, opts ...grpc.CallOption) (Announcement_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Announcement_serviceDesc.Streams[0], "/api.Announcement/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &announcementListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Announcement_ListenClient interface {
	Recv() (*AnnouncementMessage, error)
	grpc.ClientStream
}

type announcementListenClient struct {
	grpc.ClientStream
}

func (x *announcementListenClient) Recv() (*AnnouncementMessage, error) {
	m := new(AnnouncementMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnnouncementServer is the server API for Announcement service.
type AnnouncementServer interface {
	// Start listening for announcements.
	Listen(*Request, Announcement_ListenServer) error
}

// UnimplementedAnnouncementServer can be embedded to have forward compatible implementations.
type UnimplementedAnnouncementServer struct {
}

func (*UnimplementedAnnouncementServer) Listen(req *Request, srv Announcement_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}

func RegisterAnnouncementServer(s *grpc.Server, srv AnnouncementServer) {
	s.RegisterService(&_Announcement_serviceDesc, srv)
}

func _Announcement_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnnouncementServer).Listen(m, &announcementListenServer{stream})
}

type Announcement_ListenServer interface {
	Send(*AnnouncementMessage) error
	grpc.ServerStream
}

type announcementListenServer struct {
	grpc.ServerStream
}

func (x *announcementListenServer) Send(m *AnnouncementMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Announcement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Announcement",
	HandlerType: (*AnnouncementServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Announcement_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
